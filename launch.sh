#!/usr/bin/env bash

# ACCESS_KEY="<ENTER YOUR ACCESS KEY>"
# SECRET_KEY="<ENTER YOUR SECRET KEY>"

ACCESS_KEY="AKIAT3JZ3TBLHWUHYBM5"
SECRET_KEY="3ZL+uqbOenB1Zl1o7rU4eov9hnLhBrRH957Oe3si"

# BUCKET_NAME_DEPLOY="mybucket"
# BUCKET_NAME_ARTIFACT="artifacts"
BUCKET_NAME_DEPLOY="bucket-log8415"
BUCKET_NAME_ARTEFACT="artifacts-log8415"


# aws credentials
# printf "[default]
# aws_access_key_id=$ACCESS_KEY
# aws_secret_access_key=$SECRET_KEY
# " > $PATH_CREDS

# https://medium.com/@kyle.galbraith/how-to-host-a-website-on-s3-without-getting-lost-in-the-sea-e2b82aa6cd83

# setting aws credentials
aws configure set aws_access_key_id = $ACCESS_KEY
aws configure set aws_secret_access_key = $SECRET_KEY

# First Bucket for Source Code, Second Bucket for Artifacts generated by pipeline
aws s3api create-bucket --bucket $BUCKET_NAME_DEPLOY
aws s3api create-bucket --bucket $BUCKET_NAME_ARTEFACT --acl public-read-write
aws s3api put-bucket-policy --bucket $BUCKET_NAME_DEPLOY --policy file://policy_deploy.json
aws s3api put-bucket-policy --bucket $BUCKET_NAME_ARTEFACT --policy file://policy_artifacts.json
aws s3 website s3://$BUCKET_NAME_DEPLOY/ --index-document index.html

# ROLE_NAME="iam-role"
# aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://policy_s3_ec2_trust.json

# pipeline creation
# aws codepipeline create-pipeline --cli-input-json file://policy_pipeline.json
